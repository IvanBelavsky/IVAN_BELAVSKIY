//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""InputUI"",
            ""id"": ""99cb3bbe-317a-4d56-898d-1d7400933440"",
            ""actions"": [
                {
                    ""name"": ""ClickInput"",
                    ""type"": ""Button"",
                    ""id"": ""0c89effe-14a7-468d-a4f6-9580e896c24a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteInput"",
                    ""type"": ""Button"",
                    ""id"": ""c00134e6-9194-4e0b-8723-64edf9cb8ede"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f68a3507-173f-4f78-b88f-52f9b11fbee3"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f486425a-63c7-4549-9b0c-a02eb1023372"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputUI
        m_InputUI = asset.FindActionMap("InputUI", throwIfNotFound: true);
        m_InputUI_ClickInput = m_InputUI.FindAction("ClickInput", throwIfNotFound: true);
        m_InputUI_DeleteInput = m_InputUI.FindAction("DeleteInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputUI
    private readonly InputActionMap m_InputUI;
    private List<IInputUIActions> m_InputUIActionsCallbackInterfaces = new List<IInputUIActions>();
    private readonly InputAction m_InputUI_ClickInput;
    private readonly InputAction m_InputUI_DeleteInput;
    public struct InputUIActions
    {
        private @InputSystem m_Wrapper;
        public InputUIActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickInput => m_Wrapper.m_InputUI_ClickInput;
        public InputAction @DeleteInput => m_Wrapper.m_InputUI_DeleteInput;
        public InputActionMap Get() { return m_Wrapper.m_InputUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputUIActions set) { return set.Get(); }
        public void AddCallbacks(IInputUIActions instance)
        {
            if (instance == null || m_Wrapper.m_InputUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputUIActionsCallbackInterfaces.Add(instance);
            @ClickInput.started += instance.OnClickInput;
            @ClickInput.performed += instance.OnClickInput;
            @ClickInput.canceled += instance.OnClickInput;
            @DeleteInput.started += instance.OnDeleteInput;
            @DeleteInput.performed += instance.OnDeleteInput;
            @DeleteInput.canceled += instance.OnDeleteInput;
        }

        private void UnregisterCallbacks(IInputUIActions instance)
        {
            @ClickInput.started -= instance.OnClickInput;
            @ClickInput.performed -= instance.OnClickInput;
            @ClickInput.canceled -= instance.OnClickInput;
            @DeleteInput.started -= instance.OnDeleteInput;
            @DeleteInput.performed -= instance.OnDeleteInput;
            @DeleteInput.canceled -= instance.OnDeleteInput;
        }

        public void RemoveCallbacks(IInputUIActions instance)
        {
            if (m_Wrapper.m_InputUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputUIActions instance)
        {
            foreach (var item in m_Wrapper.m_InputUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputUIActions @InputUI => new InputUIActions(this);
    public interface IInputUIActions
    {
        void OnClickInput(InputAction.CallbackContext context);
        void OnDeleteInput(InputAction.CallbackContext context);
    }
}
